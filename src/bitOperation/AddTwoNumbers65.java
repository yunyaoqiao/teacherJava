package bitOperation;
//写一个函数，求两个整数之和，要求在函数体内不得使用＋、－、×、÷四则运算符号。
public class AddTwoNumbers65 {
    //1）先不考虑进位对每一位相加：1加0，0加1都等于1，而0加0，1加1等于0，所以使用异或^操作；
    //2）再单独计算进位：只有1加1产生进位，所以采用位与&操作，再左移1位；
    //3）将和与进位相加，即重复前两步操作。结束判断为进位为0。
    public static int add(int num1,int num2) {
        while (num2!=0){
            int sum=num1^num2;//不考虑进位。并且负责求"不进位结果"+"进位计数"的值
            int carry=(num1&num2)<<1;//进位计数。当进位为0，就可以得出结果
            num1=sum;//不进位的值
            num2=carry;//进位数
        }
        return num1;
    }
    public static void main(String[] args){
        System.out.println(add(4,5));
    }
    //诀窍
    //　　清零取数要用与，某位置1可用或
    //　　若要取反和交换，轻轻松松用异或

//a=1010 1010
    //按位与&
    //（1）清零：a&0=0
    //（2）取指定位上的数字。如取得数字a的最后四位：a&0000 1111 = 0000 1010

    //按位或|
    //（1）对某些位置置为1。如将a的后四位置为1：a|0000 1111 = 1010 1111

    //异或^
    //（1）（与1异或）将某些位置取反，如将a的后四位取反：a^0000 1111 = 1010 0101
    //（2）与0异或，保留原值，如：a^0000 0000 =1010 1010
    //（3）交换两个的变量值：A=A^B; B=A^B; A=A^B; 可以完成A和B的交换。
}
