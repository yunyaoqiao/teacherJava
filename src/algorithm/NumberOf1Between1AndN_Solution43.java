package algorithm;
//求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
// 为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,
// 但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,
// 可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
public class NumberOf1Between1AndN_Solution43 {
    //方法一：对每一个数，通过对10求余判断该位上是不是1
    public static int numberOf1(int n){
        int res=0;
        for (int i=1;i<=n;i++){
            res=res+number1(i);
        }
        return res;
    }
    private static int number1(int i) {
        int res=0;
        while (i>0){
            if (i%10==1)
                res++;
            i=i/10;
        }
        return res;
    }

    //方法二：设N = abcde ,其中abcde分别为十进制中各位上的数字。
    //如果判断的某一位，如为百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
    //① 如果百位上数字为0，百位上可能出现1的次数由更高位决定。比如：求1~12013的百位上1的次数，
    // 则可以知道百位出现1的情况可能是：100~199，1100~1199,2100~2199，，…，11100~11199，一共1200个。
    // 可以看出是由更高位数字（12）决定（01~11，共12个数），并且等于更高位数字（12）* 当前位数（100）。

    //② 如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。比如：1~12113的百位上1的次数，
    // 则可以知道百位受高位影响出现的情况是：100~199，1100~1199,2100~2199，，….，11100~11199，一共1200个。
    // 但同时它还受低位影响，百位出现1的情况是：12100~12113,一共114个，等于低位数字（113）+1。

    //③ 如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，比如1~12213百位上1的次数，
    // 则百位出现1的情况是：100~199,1100~1199，2100~2199，…，11100~11199,12100~12199,一共有1300个，并且等于更高位数字+1（12+1）乘以当前位数（100）
    public static int numberOf2(int n){
        int res=0;
        int cur=0,before=0,after=0;
        int i=1;
        while (i<=n){
            before=n/(i*10);//要判断的位置的高位。
            cur=(n/i)%10;//要判断的位置
            after=n-n/i*i;//要判断的位置的低位
            if (cur==0)
                res=res+before*i;
            else if (cur==1)
                res=res+before*i+after+1;
            else
                res=res+(before+1)*i;
            i=i*10;
        }
        return res;
    }

    public static void main(String[] args){
        System.out.println(numberOf1(12345));
        System.out.println(numberOf2(12345));
    }

}
